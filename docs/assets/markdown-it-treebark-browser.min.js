(function($,w){typeof exports=="object"&&typeof module<"u"?module.exports=w():typeof define=="function"&&define.amd?define(w):($=typeof globalThis<"u"?globalThis:$||self,$.MarkdownItTreebark=w())})(this,(function(){"use strict";const $=new Set(["div","span","p","header","footer","main","section","article","h1","h2","h3","h4","h5","h6","strong","em","blockquote","code","pre","ul","ol","li","table","thead","tbody","tr","th","td","a"]),w=new Set(["comment","if"]),y=new Set(["img"]),L=new Set([...$,...w,...y]),T=new Set(["id","class","style","title","role","data-","aria-"]),W={a:new Set(["href","target","rel"]),img:new Set(["src","alt","width","height"]),table:new Set(["summary"]),th:new Set(["scope","colspan","rowspan"]),td:new Set(["scope","colspan","rowspan"]),blockquote:new Set(["cite"])};function A(t,e,r=[]){if(e===".")return t;let i=t,n=e;for(;n.startsWith("..");){let o=0,s=n;for(;s.startsWith("..");)o++,s=s.substring(2),s.startsWith("/")&&(s=s.substring(1));if(o<=r.length)i=r[r.length-o],n=s.startsWith(".")?s.substring(1):s;else return}return n?n.split(".").reduce((o,s)=>o&&typeof o=="object"&&o!==null?o[s]:void 0,i):i}function q(t){return t.replace(/[&<>"']/g,e=>({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"})[e]||e)}function O(t,e,r=!0,i=[]){return t.replace(/\{\{\{([^{]*?)\}\}\}|\{\{([^{]*?)\}\}/g,(n,o,s)=>{if(o!==void 0)return`{{${o.trim()}}}`;const l=s.trim(),c=A(e,l,i);return c==null?"":r?q(String(c)):String(c)})}function P(t,e){const r=T.has(t)||[...T].some(o=>o.endsWith("-")&&t.startsWith(o)),i=W[e],n=i&&i.has(t);if(!r&&!n)throw new Error(`Attribute "${t}" is not allowed on tag "${e}"`)}function G(t){return t!==null&&typeof t=="object"&&!Array.isArray(t)&&"$bind"in t}function _(t){return t.$condition??t.$bind}function C(t){if(t!=="."){if(t.includes(".."))throw new Error(`$bind does not support parent context access (..) - use interpolation {{..prop}} in content/attributes instead. Invalid: $bind: "${t}"`);if(t.includes("{{"))throw new Error(`$bind does not support interpolation {{...}} - use literal property paths only. Invalid: $bind: "${t}"`)}}function B(t,e){if("$equals"in e&&e.$equals!==void 0){const i=t===e.$equals;return e.$not?!i:i}if("$notEquals"in e&&e.$notEquals!==void 0){const i=t!==e.$notEquals;return e.$not?!i:i}const r=!!t;return e.$not?!r:r}function N(t){if(Array.isArray(t)||typeof t!="object"||t===null)return!1;const e=Object.entries(t);if(e.length===0)return!1;const[,r]=e[0];return!r||typeof r!="object"||Array.isArray(r)?!1:"$bind"in r&&r.$bind==="."}function M(t){if(!t||typeof t!="object")throw new Error("Template object cannot be null, undefined, or non-object");const e=Object.entries(t);if(e.length===0)throw new Error("Template object must have at least one tag");const r=e[0];if(!r)throw new Error("Template object must have at least one tag");const[i,n]=r,o=typeof n=="string"?[n]:Array.isArray(n)?n:n?.$children||[],s=n&&typeof n=="object"&&!Array.isArray(n)?Object.fromEntries(Object.entries(n).filter(([l])=>l!=="$children")):{};return{tag:i,rest:n,children:o,attrs:s}}const F=(t,e)=>{if(!e)return t.length<=1?t[0]?.[1]??"":t.reduce((i,[,n])=>i+n,"");if(t.length===0)return"";if(t.length===1&&!t[0][1].includes("<"))return t[0][1];let r=`
`;for(let i=0;i<t.length;i++)r+=e.repeat(t[i][0])+t[i][1],i<t.length-1&&(r+=`
`);return r+=`
`,r};function k(t,e={}){const r=Array.isArray(t.data)?t.data:{...t.data,...e.data},i=e.indent?{indentStr:typeof e.indent=="number"?" ".repeat(e.indent):typeof e.indent=="string"?e.indent:"  ",level:0}:{};if(!Array.isArray(t.template)&&Array.isArray(t.data)&&!N(t.template)){const n=i.indentStr?`
`:"";return t.data.map(o=>d(t.template,{...o,...e.data},i)).join(n)}return d(t.template,r,i)}function D(t,e,r,i,n,o,s=[]){const l=F(i,n),c=l.startsWith(`
`)&&n?n.repeat(o||0):"";if(t==="comment")return`<!--${l}${c}-->`;const u=`<${t}${J(e,r,t,s)}>`;return y.has(t)?u:`${u}${l}${c}</${t}>`}function d(t,e,r={}){const i=r.parents||[];if(typeof t=="string")return O(t,e,!0,i);if(Array.isArray(t))return t.map(a=>d(a,e,r)).join(r.indentStr?`
`:"");const{tag:n,rest:o,children:s,attrs:l}=M(t);if(!L.has(n))throw new Error(`Tag "${n}" is not allowed`);if(n==="comment"&&r.insideComment)throw new Error("Nested comments are not allowed");if(n==="if"){if(typeof o!="object"||Array.isArray(o))throw new Error('"if" tag requires attributes object');const a=o,f=_(a);if(!f)throw new Error('"if" tag requires $bind or $condition attribute to specify the condition');C(f);const p=A(e,f,i),{$bind:E,$condition:g,$children:b=[],$not:S,$equals:v,$notEquals:U,...z}=a;if(Object.keys(z).length>0)throw new Error('"if" tag does not support attributes, only $bind/$condition, $not, $equals, $notEquals, and $children');if(!B(p,{$not:S,$equals:v,$notEquals:U}))return"";if(!r.indentStr)return b.map(j=>d(j,e,r)).join("");const K=r.level||0,Q=r.indentStr.repeat(K);return b.map((j,X)=>{const I=d(j,e,r);return X===0?I:Q+I}).join(`
`)}if(y.has(n)&&s.length>0)throw new Error(`Tag "${n}" is a void element and cannot have children`);const c={...r,insideComment:n==="comment"||r.insideComment,level:(r.level||0)+1},u=a=>a===""?[]:r.indentStr&&a.includes(`
`)&&!a.includes("<")?a.split(`
`).map(f=>[c.level,f]):[[c.level,a]];let h,m;if(G(o)){C(o.$bind);const a=A(e,o.$bind,[]),{$bind:f,$children:p=[],...E}=o;if(!Array.isArray(a)){const g=a&&typeof a=="object"&&a!==null?a:{},b=[...i,e];return d({[n]:{...E,$children:p}},g,{...r,parents:b})}h=[];for(const g of a){const b=[...i,e];for(const S of p){const v=d(S,g,{...c,parents:b});h.push(...u(v))}}m=E}else{h=[];for(const a of s){const f=d(a,e,{...c,parents:i});h.push(...u(f))}m=l}return D(n,m,e,h,r.indentStr,r.level,i)}function J(t,e,r,i=[]){const n=Object.entries(t).filter(([o])=>(P(o,r),!0)).map(([o,s])=>`${o}="${q(O(String(s),e,!1,i))}"`).join(" ");return n?" "+n:""}function R(t,e={}){const{data:r={},yaml:i,indent:n}=e,o=t.renderer.rules.fence;t.renderer.rules.fence=function(s,l,c,u,h){const m=s[l],a=m.info?m.info.trim():"";if(a==="treebark"||a.startsWith("treebark "))try{return Y(m.content,r,i,n)+`
`}catch(f){const p=f instanceof Error?f.message:"Unknown error";return`<div class="treebark-error"><strong>Treebark Error:</strong> ${H(p)}</div>
`}return o?o(s,l,c,u,h):""}}function Y(t,e,r,i){let n,o=null;if(!t.trim())throw new Error("Empty or invalid template");if(r)try{n=r.load(t)}catch(s){o=s instanceof Error?s:new Error("YAML parsing failed")}if(!n)try{n=JSON.parse(t)}catch(s){throw r&&o?new Error(`Failed to parse as YAML or JSON. YAML error: ${o.message}`):new Error(`Failed to parse as JSON: ${s instanceof Error?s.message:"Invalid format"}`)}if(!n)throw new Error("Empty or invalid template");if(n&&typeof n=="object"&&"template"in n){const s={...e,...n.data};return k({template:n.template,data:s},{indent:i})}return k({template:n,data:e},{indent:i})}function H(t){const e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;"};return t.replace(/[&<>"']/g,r=>e[r])}return R}));
//# sourceMappingURL=markdown-it-treebark-browser.min.js.map
